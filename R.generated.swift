//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `BerandaStoryboard`.
    static let berandaStoryboard = _R.storyboard.berandaStoryboard()
    /// Storyboard `GenreStoryboard`.
    static let genreStoryboard = _R.storyboard.genreStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MovieDetailStoryboard`.
    static let movieDetailStoryboard = _R.storyboard.movieDetailStoryboard()
    /// Storyboard `TabBarStorybord`.
    static let tabBarStorybord = _R.storyboard.tabBarStorybord()
    /// Storyboard `WebviewStoryboard`.
    static let webviewStoryboard = _R.storyboard.webviewStoryboard()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BerandaStoryboard", bundle: ...)`
    static func berandaStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.berandaStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "GenreStoryboard", bundle: ...)`
    static func genreStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.genreStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MovieDetailStoryboard", bundle: ...)`
    static func movieDetailStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.movieDetailStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TabBarStorybord", bundle: ...)`
    static func tabBarStorybord(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBarStorybord)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "WebviewStoryboard", bundle: ...)`
    static func webviewStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.webviewStoryboard)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `account-tab-icon`.
    static let accountTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "account-tab-icon")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `home-tab-icon`.
    static let homeTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-tab-icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "account-tab-icon", bundle: ..., traitCollection: ...)`
    static func accountTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountTabIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-tab-icon", bundle: ..., traitCollection: ...)`
    static func homeTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeTabIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `GenreFilterCollectionViewCell`.
    static let genreFilterCollectionViewCell = _R.nib._GenreFilterCollectionViewCell()
    /// Nib `GenreFilterView`.
    static let genreFilterView = _R.nib._GenreFilterView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GenreFilterCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.genreFilterCollectionViewCell) instead")
    static func genreFilterCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.genreFilterCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GenreFilterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.genreFilterView) instead")
    static func genreFilterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.genreFilterView)
    }
    #endif

    static func genreFilterCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GenreFilterCollectionViewCell? {
      return R.nib.genreFilterCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GenreFilterCollectionViewCell
    }

    static func genreFilterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GenreFilterView? {
      return R.nib.genreFilterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GenreFilterView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `genreMovieCell`.
    static let genreMovieCell: Rswift.ReuseIdentifier<BerandaMovieTableViewCell> = Rswift.ReuseIdentifier(identifier: "genreMovieCell")
    /// Reuse identifier `movieCell`.
    static let movieCell: Rswift.ReuseIdentifier<BerandaMovieTableViewCell> = Rswift.ReuseIdentifier(identifier: "movieCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _GenreFilterCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GenreFilterCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GenreFilterCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GenreFilterCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _GenreFilterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GenreFilterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GenreFilterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GenreFilterView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try berandaStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try genreStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try movieDetailStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tabBarStorybord.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try webviewStoryboard.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct berandaStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let berandaViewController = StoryboardViewControllerResource<BerandaViewController>(identifier: "BerandaViewController")
      let bundle = R.hostingBundle
      let name = "BerandaStoryboard"

      func berandaViewController(_: Void = ()) -> BerandaViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: berandaViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.berandaStoryboard().berandaViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'berandaViewController' could not be loaded from storyboard 'BerandaStoryboard' as 'BerandaViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct genreStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let genreViewController = StoryboardViewControllerResource<GenreViewController>(identifier: "GenreViewController")
      let name = "GenreStoryboard"

      func genreViewController(_: Void = ()) -> GenreViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: genreViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.genreStoryboard().genreViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'genreViewController' could not be loaded from storyboard 'GenreStoryboard' as 'GenreViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct movieDetailStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let movieDetailViewController = StoryboardViewControllerResource<MovieDetailViewController>(identifier: "MovieDetailViewController")
      let name = "MovieDetailStoryboard"

      func movieDetailViewController(_: Void = ()) -> MovieDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieDetailViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.movieDetailStoryboard().movieDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieDetailViewController' could not be loaded from storyboard 'MovieDetailStoryboard' as 'MovieDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tabBarStorybord: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TabBarStorybord"
      let tabBarViewController = StoryboardViewControllerResource<TabBarViewController>(identifier: "TabBarViewController")

      func tabBarViewController(_: Void = ()) -> TabBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.tabBarStorybord().tabBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarViewController' could not be loaded from storyboard 'TabBarStorybord' as 'TabBarViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct webviewStoryboard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WebviewStoryboard"
      let webViewViewController = StoryboardViewControllerResource<WebViewViewController>(identifier: "WebViewViewController")

      func webViewViewController(_: Void = ()) -> WebViewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.webviewStoryboard().webViewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewViewController' could not be loaded from storyboard 'WebviewStoryboard' as 'WebViewViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
